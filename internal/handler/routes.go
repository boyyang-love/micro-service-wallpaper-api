// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2

package handler

import (
	"net/http"
	"time"

	carousel "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/carousel"
	category "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/category"
	download "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/download"
	like "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/like"
	login "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/login"
	recommend "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/recommend"
	sitmap "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/sitmap"
	tag "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/tag"
	upload "github.com/boyyang-love/micro-service-wallpaper-api/internal/handler/upload"
	"github.com/boyyang-love/micro-service-wallpaper-api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/carousel/list",
				Handler: carousel.CarouselListHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/carousel/create",
				Handler: carousel.CarouselCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/carousel/remove",
				Handler: carousel.CarouselRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/carousel/update",
				Handler: carousel.CarouselUpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/category/summary/list",
				Handler: category.CategorySummaryListHandler(serverCtx),
			},
		},
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/category/create",
				Handler: category.CategoryCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/category/info",
				Handler: category.CategoryInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/category/remove",
				Handler: category.CategoryRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/category/sort",
				Handler: category.CategorySortHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/category/update",
				Handler: category.CategoryUpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/download/url",
				Handler: download.DownloadUrlHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/download/user/list",
				Handler: download.UserDownloadListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/like/num",
				Handler: like.LikeNumHandler(serverCtx),
			},
		},
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/like/create",
				Handler: like.LikeCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/like/list",
				Handler: like.LikeListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/like/user/downloadAndLikeSummary",
				Handler: like.UserDownloadAndLikeSummaryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/like/user/list",
				Handler: like.UserLikeListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/signin",
				Handler: login.SignInHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/signin/qq",
				Handler: login.SignInByQqHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/signin/qq/url",
				Handler: login.SignInByQqUrlHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/signup",
				Handler: login.SignUpHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/signup/code",
				Handler: login.SignUpCodeHandler(serverCtx),
			},
		},
		rest.WithTimeout(20000*time.Millisecond),
		rest.WithMaxBytes(20971520),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/recommend/list",
				Handler: recommend.RecommendListHandler(serverCtx),
			},
		},
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/recommend/create",
				Handler: recommend.RecommendCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/recommend/info",
				Handler: recommend.RecommendInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/recommend/remove",
				Handler: recommend.RecommendRemoveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/recommend/sort",
				Handler: recommend.RecommendSortHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/recommend/update",
				Handler: recommend.RecommendUpdateHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/sitemap/ids",
				Handler: sitmap.SitemapIdsHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/tag/info",
				Handler: tag.InfoTagHandler(serverCtx),
			},
		},
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/tag/create",
				Handler: tag.CreateTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/remove",
				Handler: tag.RemoveTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/sort",
				Handler: tag.SortTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/update",
				Handler: tag.UpdateTagHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithTimeout(20000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/image/info",
				Handler: upload.ImageInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/image/info/category",
				Handler: upload.ImageInfoByCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/image/info/hot",
				Handler: upload.ImageInfoByHotHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/image/info/id",
				Handler: upload.ImageInfoByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/image/summary/update",
				Handler: upload.ImageSummaryUpdateHandler(serverCtx),
			},
		},
		rest.WithTimeout(30000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/image/delete",
				Handler: upload.ImageDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/image/update",
				Handler: upload.ImageUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/image/upload",
				Handler: upload.ImageUploadHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithTimeout(30000*time.Millisecond),
		rest.WithMaxBytes(52428800),
	)
}
