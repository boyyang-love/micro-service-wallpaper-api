syntax = "v1"

import "base.api"
import "tag.api"
import "category.api"
import "recommend.api"

type (
    ImageUploadReq {
        FileName string `form:"file_name"`
        Type string `form:"type,optional"`
        RootDir string `form:"root_dir"`
        Dir string `form:"dir"`
        BucketName string `form:"bucket_name"`
        Quality uint32 `form:"quality"`
        Status int `form:"status"`
        Tags string `form:"tags,optional"`
        Category string `form:"category,optional"`
        Recommend string `form:"recommend,optional"`
    }
    ImageUploadRes {
        Base
        Data ImageUploadResdata `json:"data"`
    }
    ImageUploadResdata {
        FileName string `json:"file_name"`
        Path string `json:"path"`
        OriginPath string `json:"origin_path"`
    }
)

type (
    ImageInfoReq {
        BasePage
        FileName string `form:"file_name,optional"`
        Type string `form:"type,optional"`
        Status int `form:"status,optional"`
    }
    ImageInfoRes {
        Base
        Data ImageInfoResdata `json:"data"`
    }
    ImageInfoResdata {
        BaseRecord
        Records []ImageInfo `json:"records"`
    }
    ImageInfo {
        BaseTime
        Id string `json:"id"`
        Hash string `json:"hash"`
        FileName string `json:"file_name"`
        OriginFileSize int64 `json:"origin_file_size"`
        FileSize int64 `json:"file_size"`
        OriginType string `json:"origin_type"`
        FileType string `json:"file_type"`
        OriginFilePath string `json:"origin_file_path"`
        FilePath string `json:"file_path"`
        Type string `json:"type"`
        W int `json:"w"`
        H int `json:"h"`
        Status int `json:"status"`
        UserId string `json:"user_id"`
        Tags []TagInfo `json:"tags"`
        Category []CategoryInfo `json:"category"`
        Recommend []RecommendInfo `json:"recommend,optional"`
    }
)

type (
    ImageInfoByIdReq {
        Id string `form:"id"`
    }
    ImageInfoByIdRes {
        Base
        Data ImageInfo `json:"data"`
    }
)

type (
    ImageInfoByCategoryReq {
        BasePage
        Type string `form:"type"`
        CategoryId string `form:"category_id,optional"`
    }

    ImageInfoByCategoryRes {
        Base
        Data ImageInfoByCategoryResdata `json:"data"`
    }
    ImageInfoByCategoryResdata {
        BaseRecord
        Records []ImageInfoCategory `json:"records"`
    }
    ImageInfoCategory {
        BaseTime
        Id string `json:"id"`
        FileName string `json:"file_name"`
        FilePath string `json:"file_path"`
        W int `json:"w"`
        H int `json:"h"`
    }
)

type (
    ImageUpdateReq {
        Id string `json:"id"`
        FileName string `json:"file_name"`
        Type string `json:"type"`
        Status int `json:"status"`
        Tags []string `json:"tags,optional"`
        Category []string `json:"category,optional"`
        Recommend []string `json:"recommend,optional"`
    }
    ImageUpdateRes {
        Base
    }
)

type (
    ImageDeleteReq {
        BucketName string `json:"bucket_name"`
        Id string `json:"id"`
        Paths []string `json:"paths"`
    }
    ImageDeleteRes {
        Base
    }
)

@server(
    group: upload
    timeout:  30s
)
service wallpaper_pc_backend {
    @handler ImageInfo
    get /image/info (ImageInfoReq) returns (ImageInfoRes)
    @handler ImageInfoById
    get /image/info/id (ImageInfoByIdReq) returns (ImageInfoByIdRes)
    @handler ImageInfoByCategory
    get /image/info/category (ImageInfoByCategoryReq) returns (ImageInfoByCategoryRes)
}

@server(
    jwt: Auth
    group: upload
    maxBytes: 52428800
    timeout:  30s
)
service wallpaper_pc_backend {
    @handler ImageUpload
    post /image/upload (ImageUploadReq) returns (ImageUploadRes)
    @handler ImageUpdate
    post /image/update (ImageUpdateReq) returns (ImageUpdateRes)
    @handler ImageDelete
    post /image/delete (ImageDeleteReq) returns (ImageDeleteRes)
}

